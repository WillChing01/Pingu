#ifndef EVALUATION_H_INCLUDED
#define EVALUATION_H_INCLUDED

#include <array>

//units are in centipawns.

const int MATE_SCORE = 32767;

//pawn evaluation.

const int PASSED_PAWN_START = 0;
const int PASSED_PAWN_END = 37;

//mobility.

const int MOB_BISHOP_START = 5;
const int MOB_BISHOP_END = 13;

const int MOB_ROOK_START = 5;
const int MOB_ROOK_END = 6;

//order is king,queen,rook,bishop,knight,pawn.

static const std::array<int,6> PIECE_VALUES_START =
{{
    20000,
    809,
    306,
    242,
    249,
    77,
}};

static const std::array<int,6> PIECE_VALUES_END =
{{
    20000,
    1796,
    933,
    507,
    569,
    205,
}};

//piece-square tables.

static const std::array<std::array<int,64>,6> PIECE_TABLES_START =
{{
    {{
          0,  0,  0,  0,  0,  0,  0,-28,
          0,  2,  2,  0,  0,  2,  2, -2,
          1,  9,  8,  2,  2,  8, 10,  0,
          1,  9,  6,  3,  4,  8, 11, -1,
          0,  5,  4,  1,  7,  7, 16,-12,
         -1, -1, -1, -4,  1, -2, 16, -7,
         18,  8,-14,-42,-40,-41, 20, 40,
         -3, 59, 18,-44, -4,-72, 41, 48,
    }},
    {{
          0, 10, 15, 22, 25, 20, 15, 22,
        -21,-39,  6,  8, 26, 33,  5, 28,
        -22,-10, -2, 15, 36, 62, 64, 51,
        -21,-12, -4,  2, 22, 34, 38, 29,
        -22,-11,-14,-13, -8,  7,  5, 16,
        -26,-17,-10,-18,-15,-11, -2, -4,
        -29,-21,-11,-13,-12, -8,-16,-17,
        -28,-28,-19, -6,-16,-52,-30,-24,
    }},
    {{
         27, 25, 15, 18, 16, 14, 17, 26,
         19, 13, 34, 40, 39, 33, 23, 35,
         -1, 29, 23, 39, 43, 40, 35, 24,
        -13, -3,  8, 24, 17, 26, 19, 21,
        -33,-28,-30,-22,-25,-19,  1, -8,
        -41,-35,-39,-31,-31,-31, -5,-23,
        -56,-36,-30,-29,-30,-16,-14,-33,
        -22,-16, -9,  0, -6, -7,  9,-13,
    }},
    {{
        -18,  0,-10, -9, -8,-10,  0, -9,
        -17, -4, -2, -3, -1,  2, -5, -1,
         -6,  7, 17, 14, 24, 28, 26, 18,
        -15,  4,  4, 34, 14, 20,  3,  4,
        -12, -4, -8,  2,  8,-15, -6,  0,
         -9, -4, -8,-10,-10, -8, -5,  8,
          3,  1,  0,-17,-16, -5, 14,  5,
          8,  5,-11,-29,-27,-13,-11, -7,
    }},
    {{
        -61,-39,-30, -8,  0,-20,  0,-50,
        -35,-20, 11, 20, 19, 16, -5,  0,
        -30,  6, 39, 50, 61, 51, 31,  6,
        -13,  4, 28, 36, 18, 49, 16, 20,
        -25, -4,  3,  1, 10,  4, 25,-11,
        -44,-21,-11,  3,  7, -4,-12,-34,
        -54,-44,-33,-17,-23,-17,-37,-34,
        -56,-36,-59,-40,-33,-34,-35,-62,
    }},
    {{
          0,  0,  0,  0,  0,  0,  0,  0,
        109,106, 98, 93, 79, 67, 55, 60,
        -33, 28, 41, 48, 55, 72, 40, -9,
        -33, -3,-11,  5, 22, 21, 17,-15,
        -35,-15,-18,-14, -2, -5, 10,-14,
        -33,-25,-25,-24, -8, -7, 18, -3,
        -34,-28,-40,-34,-33,  8, 30, -7,
          0,  0,  0,  0,  0,  0,  0,  0,
    }},
}};

static const std::array<std::array<int,64>,6> PIECE_TABLES_END =
{{
    {{
        -50, -6, -1,  0, -3, -8,  0,-49,
         -1, 13,  9,  2,  2,  8, 21, -2,
          6, 41, 45, 37, 32, 52, 48,  2,
          3, 34, 50, 49, 46, 46, 38, -5,
        -25, 16, 37, 43, 40, 29, 13,-26,
        -30, -5,  6, 20, 17,  6,-15,-33,
        -23,-22, -9, -7, -5, -2,-27,-57,
        -61,-46,-34,-59,-83,-30,-58,-124,
    }},
    {{
          2, 13, 21, 27, 32, 23, 16, 20,
         -9,  8, 10, 22, 35, 30, 11, 17,
        -15, -5, 11, 23, 38, 50, 36, 31,
        -22,  2,  3, 29, 42, 43, 37, 29,
        -18,  0,  4, 29, 26, 22, 11, 12,
        -24,-12, -2,-10,-14, -4,-11, -7,
        -28,-24,-48,-37,-47,-56,-38,-16,
        -31,-34,-41,-46,-49,-43,-24,-21,
    }},
    {{
         31, 33, 38, 35, 40, 41, 39, 42,
         31, 38, 39, 48, 47, 27, 26, 24,
         22, 14, 29, 21, 20, 31, 14, 16,
          8, 13, 18, 15, 13, 13,  7,  6,
        -12,  0,  5, -1, -2,  0, -2,-13,
        -36,-20,-22,-24,-23,-23,-17,-26,
        -46,-40,-31,-34,-34,-39,-29,-31,
        -40,-31,-24,-30,-29,-21,-30,-54,
    }},
    {{
          5,  7,  7, 16, 12,  0,  1, -6,
         -6, 10,  8,  8,  8,  7,  2, -5,
         10, 15,  2,  3,  8, 20, 20, 16,
          6, 13, -1, -7,  3,  4, 25, 14,
         -5,  0,  5, -5,-12,  1,  1,  0,
         -3,  0, -4, -5, -3,-13,-10,  1,
         -9,-22,-17,-10,-10,-21,-17,-25,
        -19,-12,-25,-15,-11,-18,-14,-18,
    }},
    {{
        -58,-17, -7, -4,  0,  1,-20,-50,
        -47,-22,  0, 28, 21,  0,-18,-39,
        -33,  4, 36, 39, 40, 50, 13,-17,
        -28, 13, 38, 61, 64, 52, 38, -3,
        -34,  2, 40, 51, 50, 47, 14,-15,
        -63,-17, -5, 22, 17, -5,-11,-52,
        -54,-33,-32,-16,-12,-31,-36,-53,
        -59,-85,-52,-42,-44,-52,-67,-58,
    }},
    {{
          0,  0,  0,  0,  0,  0,  0,  0,
        171,159,136,112, 95, 82, 90,105,
        115,104, 84, 59, 48, 41, 69, 66,
         15,  4, -9,-34,-38,-34,-15,-22,
        -19,-18,-44,-46,-45,-43,-34,-46,
        -31,-25,-42,-38,-33,-37,-35,-56,
        -19,-17,-21,-18,-11,-18,-28,-62,
          0,  0,  0,  0,  0,  0,  0,  0,
    }},
}};

#endif // EVALUATION_H_INCLUDED
